LONG WINAPI RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPSTR lpName,DWORD cbName);
LONG WINAPI RegQueryValueA(HKEY hKey,LPCSTR lpSubKey,LPSTR lpValue,PLONG lpcbValue);
LONG WINAPI RegCreateKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD Reserved,LPSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,LPDWORD lpdwDisposition);
LONG WINAPI RegCreateKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
LONG WINAPI RegSetValueExA(HKEY hKey,LPCSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE *lpData,DWORD cbData);
LONG WINAPI RegDeleteValueA(HKEY hKey,LPCSTR lpValueName);
LONG WINAPI RegOpenKeyA(HKEY hKey,LPCSTR lpSubKey,PHKEY phkResult);
BOOL WINAPI GetUserNameA(LPSTR lpBuffer,LPDWORD nSize);
LONG WINAPI RegOpenKeyExA(HKEY hKey,LPCSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
LONG WINAPI RegQueryValueExA(HKEY hKey,LPCSTR lpValueName,LPDWORD lpReserved,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
LONG WINAPI RegCloseKey(HKEY hKey);
LONG WINAPI RegDeleteKeyA(HKEY hKey,LPCSTR lpSubKey);
!COMCTL32.dll
!DINPUT.dll
HRESULT WINAPI DirectInputCreateA(HINSTANCE hinst,DWORD dwVersion,LPDIRECTINPUTA *ppDI,LPUNKNOWN punkOuter);
!DSOUND.dll
!GDI32.dll
BOOL WINAPI ScaleWindowExtEx(HDC,int,int,int,int,LPSIZE);
BOOL WINAPI SetWindowExtEx(HDC,int,int,LPSIZE);
BOOL WINAPI ScaleViewportExtEx(HDC,int,int,int,int,LPSIZE);
BOOL WINAPI SetViewportExtEx(HDC,int,int,LPSIZE);
BOOL WINAPI OffsetViewportOrgEx(HDC,int,int,LPPOINT);
BOOL WINAPI SetViewportOrgEx(HDC,int,int,LPPOINT);
int WINAPI Escape(HDC,int,int,LPCSTR,LPVOID);
BOOL WINAPI ExtTextOutA(HDC,int,int,UINT,const RECT *,LPCSTR,UINT,const INT *);
BOOL WINAPI TextOutA(HDC,int,int,LPCSTR,int);
BOOL WINAPI RectVisible(HDC,const RECT *);
BOOL WINAPI PtVisible(HDC,int,int);
int WINAPI IntersectClipRect(HDC,int,int,int,int);
int WINAPI ExcludeClipRect(HDC,int,int,int,int);
int WINAPI GetClipBox(HDC,LPRECT);
int WINAPI SetMapMode(HDC,int);
int WINAPI SetROP2(HDC,int);
BOOL WINAPI RestoreDC(HDC,int);
int WINAPI SaveDC(HDC);
int WINAPI GetPixelFormat(HDC);
COLORREF WINAPI SetBkColor(HDC,COLORREF);
HBRUSH WINAPI CreateSolidBrush(COLORREF);
int WINAPI SetDIBitsToDevice(HDC,int,int,DWORD,DWORD,int,int,UINT,UINT,const void *,const BITMAPINFO *,UINT);
int WINAPI StretchDIBits(HDC,int,int,int,int,int,int,int,int,const void *,const BITMAPINFO *,UINT,DWORD);
int WINAPI GetObjectA(HGDIOBJ,int,LPVOID);
HPEN WINAPI CreatePen(int,int,COLORREF);
BOOL WINAPI Rectangle(HDC,int,int,int,int);
BOOL WINAPI BitBlt(HDC,int,int,int,int,HDC,int,int,DWORD);
COLORREF WINAPI SetPixel(HDC,int,int,COLORREF);
HBITMAP WINAPI CreateCompatibleBitmap(HDC,int,int);
HGDIOBJ WINAPI GetStockObject(int);
int WINAPI SetBkMode(HDC,int);
BOOL WINAPI MoveToEx(HDC,int,int,LPPOINT);
HFONT WINAPI CreateFontIndirectA(const LOGFONTA *);
BOOL WINAPI PatBlt(HDC,int,int,int,int,DWORD);
int WINAPI SelectClipRgn(HDC,HRGN);
HRGN WINAPI CreateRectRgn(int,int,int,int);
BOOL WINAPI GetTextExtentPoint32A(HDC,LPCSTR,int,LPSIZE);
HBITMAP WINAPI CreateBitmap(int,int,UINT,UINT,const void *);
BOOL WINAPI GetTextMetricsA(HDC,LPTEXTMETRICA);
int WINAPI EndDoc(HDC);
int WINAPI EndPage(HDC);
BOOL WINAPI StretchBlt(HDC,int,int,int,int,HDC,int,int,int,int,DWORD);
int WINAPI StartPage(HDC);
int WINAPI StartDocA(HDC,const DOCINFOA *);
HRGN WINAPI CreateRectRgnIndirect(const RECT *);
int WINAPI CombineRgn(HRGN,HRGN,HRGN,int);
BOOL WINAPI DPtoLP(HDC,LPPOINT,int);
int WINAPI DescribePixelFormat(HDC,int,UINT,LPPIXELFORMATDESCRIPTOR);
BOOL WINAPI SetDeviceGammaRamp(HDC,LPVOID);
HBRUSH WINAPI CreatePatternBrush(HBITMAP);
BOOL WINAPI GetDeviceGammaRamp(HDC,LPVOID);
COLORREF WINAPI SetTextColor(HDC,COLORREF);
COLORREF WINAPI GetBkColor(HDC);
BOOL WINAPI GetCharWidthA(HDC,UINT,UINT,LPINT);
!GLU32.dll
!KERNEL32.dll
ATOM WINAPI GlobalFindAtomA(LPCSTR lpString);
int WINAPI lstrcmpW(LPCWSTR lpString1,LPCWSTR lpString2);
DWORD WINAPI GetFullPathNameA(LPCSTR lpFileName,DWORD nBufferLength,LPSTR lpBuffer,LPSTR *lpFilePart);
BOOL WINAPI GetVolumeInformationA(LPCSTR lpRootPathName,LPSTR lpVolumeNameBuffer,DWORD nVolumeNameSize,LPDWORD lpVolumeSerialNumber,LPDWORD lpMaximumComponentLength,LPDWORD lpFileSystemFlags,LPSTR lpFileSystemNameBuffer,DWORD nFileSystemNameSize);
BOOL WINAPI FindClose(HANDLE hFindFile);
BOOL WINAPI DuplicateHandle(HANDLE hSourceProcessHandle,HANDLE hSourceHandle,HANDLE hTargetProcessHandle,LPHANDLE lpTargetHandle,DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwOptions);
LCID GetThreadLocale(void);
DWORD WINAPI GetFileSize(HANDLE hFile,LPDWORD lpFileSizeHigh);
BOOL WINAPI SetEndOfFile(HANDLE hFile);
DWORD WINAPI GetModuleFileNameW(HMODULE hModule,LPWSTR lpFilename,DWORD nSize);
BOOL WINAPI LockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh);
BOOL WINAPI FlushFileBuffers(HANDLE hFile);
DWORD WINAPI SetFilePointer(HANDLE hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod);
BOOL WINAPI WriteFile(HANDLE hFile,LPCVOID lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped);
BOOL WINAPI MoveFileA(LPCSTR lpExistingFileName,LPCSTR lpNewFileName);
DWORD WINAPI ExpandEnvironmentStringsA(LPCSTR lpSrc,LPSTR lpDst,DWORD nSize);
DWORD WINAPI WaitForMultipleObjects(DWORD nCount,const HANDLE *lpHandles,BOOL bWaitAll,DWORD dwMilliseconds);
BOOL WINAPI TerminateThread(HANDLE hThread,DWORD dwExitCode);
BOOL WINAPI GetExitCodeThread(HANDLE hThread,LPDWORD lpExitCode);
LONG WINAPI InterlockedDecrement(LPLONG lpAddend);
BOOL WINAPI UnlockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh);
ATOM WINAPI GlobalAddAtomA(LPCSTR lpString);
int WINAPI lstrcmpA(LPCSTR lpString1,LPCSTR lpString2);
int WINAPI GetLocaleInfoA(LCID Locale,LCTYPE LCType,LPSTR lpLCData,int cchData);
BOOL WINAPI EnumResourceLanguagesA(HMODULE hModule,LPCSTR lpType,LPCSTR lpName,ENUMRESLANGPROC lpEnumFunc,LONG lParam);
LCID WINAPI ConvertDefaultLocale(LCID Locale);
BOOL WINAPI FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATAA lpFindFileData);
BOOL WINAPI FileTimeToSystemTime(const FILETIME *lpFileTime,LPSYSTEMTIME lpSystemTime);
BOOL WINAPI FileTimeToLocalFileTime(const FILETIME *lpFileTime,LPFILETIME lpLocalFileTime);
LONG WINAPI InterlockedIncrement(LPLONG lpAddend);
LPVOID WINAPI TlsGetValue(DWORD dwTlsIndex);
HGLOBAL WINAPI GlobalReAlloc(HGLOBAL hMem,DWORD dwBytes,UINT uFlags);
DWORD TlsAlloc(void);
__crtTlsAlloc(x);
BOOL WINAPI TlsSetValue(DWORD dwTlsIndex,LPVOID lpTlsValue);
HLOCAL WINAPI LocalReAlloc(HLOCAL hMem,UINT uBytes,UINT uFlags);
void WINAPI DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL WINAPI TlsFree(DWORD dwTlsIndex);
UINT WINAPI GlobalFlags(HGLOBAL hMem);
UINT WINAPI WinExec(LPCSTR lpCmdLine,UINT uCmdShow);
BOOL WINAPI QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency);
void WINAPI Sleep(DWORD dwMilliseconds);
BOOL WINAPI SetProcessAffinityMask(HANDLE hProcess,DWORD dwProcessAffinityMask);
BOOL WINAPI GetFileTime(HANDLE hFile,LPFILETIME lpCreationTime,LPFILETIME lpLastAccessTime,LPFILETIME lpLastWriteTime);
BOOL WINAPI GetCPInfo(UINT CodePage,LPCPINFO lpCPInfo);
UINT GetOEMCP(void);
void WINAPI RaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberOfArguments,const DWORD *lpArguments);
UINT GetConsoleCP(void);
BOOL WINAPI GetConsoleMode(HANDLE hConsoleHandle,LPDWORD lpMode);
BOOL WINAPI GetProcessAffinityMask(HANDLE hProcess,LPDWORD lpProcessAffinityMask,LPDWORD lpSystemAffinityMask);
HANDLE GetCurrentProcess(void);
void WINAPI GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
BOOL WINAPI GetFileInformationByHandle(HANDLE hFile,LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
BOOL WINAPI PeekNamedPipe(HANDLE hNamedPipe,LPVOID lpBuffer,DWORD nBufferSize,LPDWORD lpBytesRead,LPDWORD lpTotalBytesAvail,LPDWORD lpBytesLeftThisMessage);
UINT WINAPI GetDriveTypeA(LPCSTR lpRootPathName);
LPVOID WINAPI HeapReAlloc(HANDLE hHeap,DWORD dwFlags,LPVOID lpMem,DWORD dwBytes);
DWORD WINAPI VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION lpBuffer,DWORD dwLength);
int WINAPI GetTimeFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpTime,LPCSTR lpFormat,LPSTR lpTimeStr,int cchTime);
int WINAPI GetDateFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME *lpDate,LPCSTR lpFormat,LPSTR lpDateStr,int cchDate);
LONG WINAPI UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo);
LPTOP_LEVEL_EXCEPTION_FILTER WINAPI SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
BOOL WINAPI TerminateProcess(HANDLE hProcess,UINT uExitCode);
BOOL IsDebuggerPresent(void);
DWORD WINAPI GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
int WINAPI LCMapStringA(LCID Locale,DWORD dwMapFlags,LPCSTR lpSrcStr,int cchSrc,LPSTR lpDestStr,int cchDest);
int WINAPI LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest);
BOOL WINAPI WriteConsoleA(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
UINT GetConsoleOutputCP(void);
BOOL WINAPI WriteConsoleW(HANDLE hConsoleOutput,const void *lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
BOOL WINAPI SetStdHandle(DWORD nStdHandle,HANDLE hHandle);
BOOL WINAPI VirtualFree(LPVOID lpAddress,DWORD dwSize,DWORD dwFreeType);
BOOL WINAPI HeapDestroy(HANDLE hHeap);
BOOL WINAPI GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
BOOL WINAPI GetStringTypeW(DWORD dwInfoType,LPCWSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
BOOL WINAPI FreeEnvironmentStringsW(LPWSTR);
BOOL WINAPI SetEnvironmentVariableA(LPCSTR lpName,LPCSTR lpValue);
BOOL WINAPI SetThreadPriority(HANDLE hThread,int nPriority);
HANDLE WINAPI CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,DWORD dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId);
HANDLE WINAPI CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes,BOOL bManualReset,BOOL bInitialState,LPCSTR lpName);
DWORD WINAPI WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds);
BOOL WINAPI SetEvent(HANDLE hEvent);
HANDLE GetCurrentThread(void);
void WINAPI SetLastError(DWORD dwErrCode);
BOOL WINAPI WritePrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpString,LPCSTR lpFileName);
HGLOBAL WINAPI GlobalHandle(LPCVOID pMem);
DWORD WINAPI GetPrivateProfileStringA(LPCSTR lpAppName,LPCSTR lpKeyName,LPCSTR lpDefault,LPSTR lpReturnedString,DWORD nSize,LPCSTR lpFileName);
UINT WINAPI GetPrivateProfileIntA(LPCSTR lpAppName,LPCSTR lpKeyName,INT nDefault,LPCSTR lpFileName);
DWORD WINAPI GetCurrentDirectoryA(DWORD nBufferLength,LPSTR lpBuffer);
HFILE WINAPI OpenFile(LPCSTR lpFileName,LPOFSTRUCT lpReOpenBuff,UINT uStyle);
UINT WINAPI GlobalGetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize);
ATOM WINAPI GlobalDeleteAtom(ATOM nAtom);
HANDLE WINAPI FindFirstFileA(LPCSTR lpFileName,LPWIN32_FIND_DATAA lpFindFileData);
DWORD WINAPI GetFileAttributesA(LPCSTR lpFileName);
BOOL WINAPI CreateDirectoryA(LPCSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
BOOL WINAPI SetFileAttributesA(LPCSTR lpFileName,DWORD dwFileAttributes);
BOOL WINAPI DeleteFileA(LPCSTR lpFileName);
HRSRC WINAPI FindResourceA(HMODULE hModule,LPCSTR lpName,LPCSTR lpType);
HGLOBAL WINAPI LoadResource(HMODULE hModule,HRSRC hResInfo);
LPVOID WINAPI LockResource(HGLOBAL hResData);
DWORD WINAPI SizeofResource(HMODULE hModule,HRSRC hResInfo);
BOOL WINAPI GetStringTypeExA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
int WINAPI lstrlenA(LPCSTR lpString);
int WINAPI lstrcmpiA(LPCSTR lpString1,LPCSTR lpString2);
int WINAPI CompareStringW(LCID Locale,DWORD dwCmpFlags,LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2);
int WINAPI CompareStringA(LCID Locale,DWORD dwCmpFlags,LPCSTR lpString1,int cchCount1,LPCSTR lpString2,int cchCount2);
int WINAPI WideCharToMultiByte(UINT CodePage,DWORD dwFlags,LPCWSTR lpWideCharStr,int cchWideChar,LPSTR lpMultiByteStr,int cchMultiByte,LPCSTR lpDefaultChar,LPBOOL lpUsedDefaultChar);
LONG WINAPI InterlockedExchange(LPLONG Target,LONG Value);
int WINAPI MultiByteToWideChar(UINT CodePage,DWORD dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpWideCharStr,int cchWideChar);
BOOL WINAPI SetProcessWorkingSetSize(HANDLE hProcess,DWORD dwMinimumWorkingSetSize,DWORD dwMaximumWorkingSetSize);
BOOL WINAPI VirtualUnlock(LPVOID lpAddress,DWORD dwSize);
BOOL WINAPI VirtualLock(LPVOID lpAddress,DWORD dwSize);
BOOL WINAPI GetDiskFreeSpaceExA(LPCSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
UINT WINAPI SetErrorMode(UINT uMode);
void WINAPI InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
HANDLE WINAPI CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCSTR lpName);
BOOL WINAPI CreateProcessA(LPCSTR lpApplicationName,LPSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCSTR lpCurrentDirectory,LPSTARTUPINFOA lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
HANDLE WINAPI CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes,BOOL bManualReset,LPCSTR lpTimerName);
BOOL WINAPI SetWaitableTimer(HANDLE hTimer,const LARGE_INTEGER *lpDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,BOOL fResume);
BOOL WINAPI FreeLibrary(HMODULE hLibModule);
DWORD WINAPI FormatMessageA(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPSTR lpBuffer,DWORD nSize,va_list *Arguments);
HGLOBAL WINAPI GlobalAlloc(UINT uFlags,DWORD dwBytes);
LPSTR WINAPI lstrcpyA(LPSTR lpString1,LPCSTR lpString2);
HGLOBAL WINAPI GlobalFree(HGLOBAL hMem);
LPVOID WINAPI GlobalLock(HGLOBAL hMem);
DWORD WINAPI GlobalSize(HGLOBAL hMem);
BOOL WINAPI GlobalUnlock(HGLOBAL hMem);
void WINAPI OutputDebugStringA(LPCSTR lpOutputString);
void WINAPI LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL WINAPI TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
void WINAPI EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
BOOL WINAPI ResetEvent(HANDLE hEvent);
!OLEACC.dll
LRESULT WINAPI LresultFromObject(const IID *const riid,WPARAM wParam,LPUNKNOWN punk);
HRESULT WINAPI CreateStdAccessibleObject(HWND hwnd,LONG idObject,const IID *const riid,void **ppvObject);
!OLEAUT32.dll
!OPENGL32.dll
!SHELL32.dll
void WINAPI DragFinish(HDROP);
UINT WINAPI DragQueryFileA(HDROP,UINT,LPSTR,UINT);
HINSTANCE WINAPI ShellExecuteA(HWND hwnd,LPCSTR lpOperation,LPCSTR lpFile,LPCSTR lpParameters,LPCSTR lpDirectory,INT nShowCmd);
BOOL WINAPI SHGetPathFromIDListA(LPCITEMIDLIST pidl,LPSTR pszPath);
LPITEMIDLIST WINAPI SHBrowseForFolderA(LPBROWSEINFOA lpbi);
!SHLWAPI.dll
BOOL WINAPI PathIsUNCA(LPCSTR pszPath);
LPSTR WINAPI PathFindFileNameA(LPCSTR pszPath);
LPSTR WINAPI PathFindExtensionA(LPCSTR pszPath);
BOOL WINAPI PathStripToRootA(LPSTR pszPath);
!USER32.dll
HWND WINAPI WindowFromPoint(POINT Point);
BOOL WINAPI IsClipboardFormatAvailable(UINT format);
UINT WINAPI RegisterClipboardFormatA(LPCSTR lpszFormat);
HWND WINAPI GetTopWindow(HWND hWnd);
UINT WINAPI GetMenuState(HMENU hMenu,UINT uId,UINT uFlags);
HMENU CreateMenu(void);
LONG WINAPI SendDlgItemMessageA(HWND hDlg,int nIDDlgItem,UINT Msg,WPARAM wParam,LPARAM lParam);
BOOL WINAPI SetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPCSTR lpString);
BOOL WINAPI IntersectRect(LPRECT lprcDst,const RECT *lprcSrc1,const RECT *lprcSrc2);
HWND WINAPI SetParent(HWND hWndChild,HWND hWndNewParent);
BOOL WINAPI ClipCursor(const RECT *lpRect);
BOOL WINAPI RemoveMenu(HMENU hMenu,UINT uPosition,UINT uFlags);
int wsprintfA(LPSTR,LPCSTR,...);
BOOL WINAPI BringWindowToTop(HWND hWnd);
BOOL WINAPI GetCaretPos(LPPOINT lpPoint);
BOOL WINAPI SetScrollRange(HWND hWnd,int nBar,int nMinPos,int nMaxPos,BOOL bRedraw);
SHORT WINAPI GetKeyState(int nVirtKey);
BOOL WINAPI GetClassInfoA(HINSTANCE hInstance,LPCSTR lpClassName,LPWNDCLASSA lpWndClass);
BOOL WINAPI KillTimer(HWND hWnd,UINT uIDEvent);
BOOL WINAPI SetCursorPos(int X,int Y);
HWND WINAPI GetWindow(HWND hWnd,UINT uCmd);
BOOL WINAPI DestroyCursor(HCURSOR hCursor);
BOOL WINAPI ShowScrollBar(HWND hWnd,int wBar,BOOL bShow);
int WINAPI SetScrollPos(HWND hWnd,int nBar,int nPos,BOOL bRedraw);
int WINAPI GetScrollPos(HWND hWnd,int nBar);
DWORD GetMessagePos(void);
int WINAPI MapWindowPoints(HWND hWndFrom,HWND hWndTo,LPPOINT lpPoints,UINT cPoints);
BOOL WINAPI DestroyMenu(HMENU hMenu);
BOOL WINAPI CheckDlgButton(HWND hDlg,int nIDButton,UINT uCheck);
BOOL WINAPI IsWindowEnabled(HWND hWnd);
UINT WINAPI IsDlgButtonChecked(HWND hDlg,int nIDButton);
int WINAPI GetWindowTextLengthA(HWND hWnd);
BOOL WINAPI DestroyAcceleratorTable(HACCEL hAccel);
HWND WINAPI SetActiveWindow(HWND hWnd);
BOOL WINAPI SetMenuItemInfoA(HMENU,UINT,BOOL,LPCMENUITEMINFOA);
BOOL WINAPI GetMenuItemInfoA(HMENU,UINT,BOOL,LPMENUITEMINFOA);
BOOL WINAPI InsertMenuA(HMENU hMenu,UINT uPosition,UINT uFlags,UINT uIDNewItem,LPCSTR lpNewItem);
int WINAPI GetMenuItemCount(HMENU hMenu);
UINT WINAPI GetMenuItemID(HMENU hMenu,int nPos);
HWND GetActiveWindow(void);
HACCEL WINAPI LoadAcceleratorsA(HINSTANCE hInstance,LPCSTR lpTableName);
int WINAPI TranslateAcceleratorA(HWND hWnd,HACCEL hAccTable,LPMSG lpMsg);
BOOL WINAPI LockWindowUpdate(HWND hWndLock);
HMENU WINAPI LoadMenuA(HINSTANCE hInstance,LPCSTR lpMenuName);
HMENU WINAPI GetSubMenu(HMENU hMenu,int nPos);
BOOL WINAPI SetRectEmpty(LPRECT lprc);
BOOL WINAPI IsRectEmpty(const RECT *lprc);
BOOL WINAPI IsWindow(HWND hWnd);
HMENU CreatePopupMenu(void);
BOOL WINAPI AppendMenuA(HMENU hMenu,UINT uFlags,UINT uIDNewItem,LPCSTR lpNewItem);
BOOL WINAPI TrackPopupMenu(HMENU hMenu,UINT uFlags,int x,int y,int nReserved,HWND hWnd,const RECT *prcRect);
HDWP WINAPI BeginDeferWindowPos(int nNumWindows);
HDWP WINAPI DeferWindowPos(HDWP hWinPosInfo,HWND hWnd,HWND hWndInsertAfter,int x,int y,int cx,int cy,UINT uFlags);
BOOL WINAPI EndDeferWindowPos(HDWP hWinPosInfo);
BOOL WINAPI SetWindowPlacement(HWND hWnd,const WINDOWPLACEMENT *lpwndpl);
BOOL WINAPI GetWindowPlacement(HWND hWnd,WINDOWPLACEMENT *lpwndpl);
BOOL WINAPI GetCursorPos(LPPOINT lpPoint);
BOOL WINAPI ClientToScreen(HWND hWnd,LPPOINT lpPoint);
int WINAPI DrawTextA(HDC hDC,LPCSTR lpString,int nCount,LPRECT lpRect,UINT uFormat);
int WINAPI DialogBoxParamA(HINSTANCE hInstance,LPCSTR lpTemplateName,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
BOOL WINAPI DrawFocusRect(HDC hDC,const RECT *lprc);
int WINAPI GetSystemMetrics(int nIndex);
BOOL WINAPI DrawEdge(HDC hdc,LPRECT qrc,UINT edge,UINT grfFlags);
BOOL WINAPI EndDialog(HWND hDlg,int nResult);
HWND WINAPI GetDlgItem(HWND hDlg,int nIDDlgItem);
UINT WINAPI GetDlgItemTextA(HWND hDlg,int nIDDlgItem,LPSTR lpString,int nMaxCount);
BOOL WINAPI IsDialogMessageA(HWND hDlg,LPMSG lpMsg);
HDC WINAPI BeginPaint(HWND hWnd,LPPAINTSTRUCT lpPaint);
BOOL WINAPI CopyRect(LPRECT lprcDst,const RECT *lprcSrc);
HBRUSH WINAPI GetSysColorBrush(int nIndex);
BOOL WINAPI EndPaint(HWND hWnd,const PAINTSTRUCT *lpPaint);
int WINAPI GetDlgCtrlID(HWND hWnd);
DWORD WINAPI GetSysColor(int nIndex);
BOOL ReleaseCapture(void);
HWND WINAPI SetCapture(HWND hWnd);
HWND GetCapture(void);
BOOL WINAPI GetWindowRect(HWND hWnd,LPRECT lpRect);
HBITMAP WINAPI LoadBitmapA(HINSTANCE hInstance,LPCSTR lpBitmapName);
BOOL WINAPI InflateRect(LPRECT lprc,int dx,int dy);
int WINAPI GetMenuStringA(HMENU hMenu,UINT uIDItem,LPSTR lpString,int nMaxCount,UINT uFlag);
LONG WINAPI TabbedTextOutA(HDC hDC,int X,int Y,LPCSTR lpString,int nCount,int nTabPositions,LPINT lpnTabStopPositions,int nTabOrigin);
int WINAPI DrawTextExA(HDC,LPSTR,int,LPRECT,UINT,LPDRAWTEXTPARAMS);
BOOL WINAPI GrayStringA(HDC hDC,HBRUSH hBrush,GRAYSTRINGPROC lpOutputFunc,LPARAM lpData,int nCount,int X,int Y,int nWidth,int nHeight);
HDC WINAPI GetWindowDC(HWND hWnd);
BOOL WINAPI ModifyMenuA(HMENU hMnu,UINT uPosition,UINT uFlags,UINT uIDNewItem,LPCSTR lpNewItem);
LONG GetMenuCheckMarkDimensions(void);
BOOL WINAPI SetMenuItemBitmaps(HMENU hMenu,UINT uPosition,UINT uFlags,HBITMAP hBitmapUnchecked,HBITMAP hBitmapChecked);
BOOL WINAPI IsIconic(HWND hWnd);
BOOL WINAPI GetClassInfoExA(HINSTANCE,LPCSTR,LPWNDCLASSEXA);
LONG GetMessageTime(void);
HWND WINAPI GetLastActivePopup(HWND hWnd);
HANDLE WINAPI RemovePropA(HWND hWnd,LPCSTR lpString);
HANDLE WINAPI GetPropA(HWND hWnd,LPCSTR lpString);
BOOL WINAPI SetPropA(HWND hWnd,LPCSTR lpString,HANDLE hData);
int WINAPI GetClassNameA(HWND hWnd,LPSTR lpClassName,int nMaxCount);
DWORD WINAPI GetClassLongA(HWND hWnd,int nIndex);
BOOL WINAPI IsChild(HWND hWndParent,HWND hWnd);
BOOL WINAPI WinHelpA(HWND hWndMain,LPCSTR lpszHelp,UINT uCommand,DWORD dwData);
UINT WINAPI GetDlgItemInt(HWND hDlg,int nIDDlgItem,BOOL *lpTranslated,BOOL bSigned);
HWND WINAPI GetNextDlgTabItem(HWND hDlg,HWND hCtl,BOOL bPrevious);
HWND WINAPI CreateDialogIndirectParamA(HINSTANCE hInstance,LPCDLGTEMPLATEA lpTemplate,HWND hWndParent,DLGPROC lpDialogFunc,LPARAM dwInitParam);
HWND WINAPI FindWindowA(LPCSTR lpClassName,LPCSTR lpWindowName);
BOOL WINAPI ValidateRect(HWND hWnd,const RECT *lpRect);
DWORD WINAPI GetWindowThreadProcessId(HWND hWnd,LPDWORD lpdwProcessId);
BOOL WINAPI SetMenu(HWND hWnd,HMENU hMenu);
BOOL WINAPI InsertMenuItemA(HMENU,UINT,BOOL,LPCMENUITEMINFOA);
LONG WINAPI ReuseDDElParam(LONG lParam,UINT msgIn,UINT msgOut,UINT uiLo,UINT uiHi);
BOOL WINAPI UnpackDDElParam(UINT msg,LONG lParam,PUINT puiLo,PUINT puiHi);
BOOL WINAPI IsZoomed(HWND hWnd);
HMENU WINAPI GetSystemMenu(HWND hWnd,BOOL bRevert);
BOOL WINAPI ShowOwnedPopups(HWND hWnd,BOOL fShow);
HDC WINAPI GetDCEx(HWND hWnd,HRGN hrgnClip,DWORD flags);
BOOL WINAPI RedrawWindow(HWND hWnd,const RECT *lprcUpdate,HRGN hrgnUpdate,UINT flags);
BOOL WINAPI EnableWindow(HWND hWnd,BOOL bEnable);
HWND WINAPI GetParent(HWND hWnd);
BOOL WINAPI ScreenToClient(HWND hWnd,LPPOINT lpPoint);
LPSTR WINAPI CharUpperA(LPSTR lpsz);
LONG WINAPI GetWindowLongA(HWND hWnd,int nIndex);
BOOL WINAPI GetClientRect(HWND hWnd,LPRECT lpRect);
BOOL WINAPI UnregisterHotKey(HWND hWnd,int id);
BOOL WINAPI RegisterHotKey(HWND hWnd,int id,UINT fsModifiers,UINT vk);
BOOL WINAPI SystemParametersInfoA(UINT uiAction,UINT uiParam,PVOID pvParam,UINT fWinIni);
HHOOK WINAPI SetWindowsHookExA(int idHook,HOOKPROC lpfn,HINSTANCE hmod,DWORD dwThreadId);
BOOL WINAPI UnhookWindowsHookEx(HHOOK hhk);
SHORT WINAPI GetAsyncKeyState(int vKey);
BOOL WINAPI MessageBeep(UINT uType);
LRESULT WINAPI CallNextHookEx(HHOOK hhk,int nCode,WPARAM wParam,LPARAM lParam);
BOOL WINAPI InvalidateRect(HWND hWnd,const RECT *lpRect,BOOL bErase);
BOOL WINAPI CloseWindow(HWND hWnd);
LRESULT WINAPI SendMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
BOOL WINAPI SetWindowTextA(HWND hWnd,LPCSTR lpString);
LRESULT WINAPI CallWindowProcA(WNDPROC lpPrevWndFunc,HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
HWND GetForegroundWindow(void);
BOOL EmptyClipboard(void);
HANDLE WINAPI SetClipboardData(UINT uFormat,HANDLE hMem);
BOOL WINAPI OpenClipboard(HWND hWndNewOwner);
HANDLE WINAPI GetClipboardData(UINT uFormat);
BOOL CloseClipboard(void);
UINT WINAPI SetTimer(HWND hWnd,UINT nIDEvent,UINT uElapse,TIMERPROC lpTimerFunc);
BOOL WINAPI UpdateWindow(HWND hWnd);
LONG WINAPI SetWindowLongA(HWND hWnd,int nIndex,LONG dwNewLong);
BOOL WINAPI SetWindowPos(HWND hWnd,HWND hWndInsertAfter,int X,int Y,int cx,int cy,UINT uFlags);
BOOL WINAPI GetMessageA(LPMSG lpMsg,HWND hWnd,UINT wMsgFilterMin,UINT wMsgFilterMax);
BOOL WINAPI DestroyWindow(HWND hWnd);
BOOL WINAPI EnumDisplaySettingsA(LPCSTR lpszDeviceName,DWORD iModeNum,LPDEVMODEA lpDevMode);
void WINAPI PostQuitMessage(int nExitCode);
LRESULT WINAPI DefWindowProcA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
UINT WINAPI RegisterWindowMessageA(LPCSTR lpString);
BOOL WINAPI PostMessageA(HWND hWnd,UINT Msg,WPARAM wParam,LPARAM lParam);
BOOL WINAPI EnumWindows(WNDENUMPROC lpEnumFunc,LPARAM lParam);
int WINAPI GetWindowTextA(HWND hWnd,LPSTR lpString,int nMaxCount);
LONG WINAPI ChangeDisplaySettingsA(LPDEVMODEA lpDevMode,DWORD dwFlags);
!VERSION.dll
DWORD WINAPI GetFileVersionInfoSizeA(LPSTR lptstrFilename,LPDWORD lpdwHandle);
BOOL WINAPI GetFileVersionInfoA(LPSTR lptstrFilename,DWORD dwHandle,DWORD dwLen,LPVOID lpData);
BOOL WINAPI VerQueryValueA(const LPVOID pBlock,LPSTR lpSubBlock,LPVOID *lplpBuffer,PUINT puLen);
!WINMM.dll
BOOL WINAPI PlaySoundA(LPCSTR pszSound,HMODULE hmod,DWORD fdwSound);
DWORD timeGetTime(void);
MMRESULT WINAPI timeBeginPeriod(UINT uPeriod);
MMRESULT WINAPI timeEndPeriod(UINT uPeriod);
!WINSPOOL.DRV
BOOL WINAPI OpenPrinterA(LPSTR pPrinterName,LPHANDLE phPrinter,LPPRINTER_DEFAULTSA pDefault);
LONG WINAPI DocumentPropertiesA(HWND hWnd,HANDLE hPrinter,LPSTR pDeviceName,PDEVMODEA pDevModeOutput,PDEVMODEA pDevModeInput,DWORD fMode);
BOOL WINAPI ClosePrinter(HANDLE hPrinter);
!WS2_32.dll
void WINAPI WSASetLastError(int iError);
!WSOCK32.dll
!comdlg32.dll
BOOL WINAPI PrintDlgA(LPPRINTDLGA);
BOOL WINAPI GetSaveFileNameA(LPOPENFILENAMEA);
BOOL WINAPI GetOpenFileNameA(LPOPENFILENAMEA);
__int16 WINAPI GetFileTitleA(LPCSTR,LPSTR,WORD);
!iphlpapi.dll
!ole32.dll
void CoUninitialize(void);
HRESULT WINAPI CoInitialize(LPVOID pvReserved);
HRESULT WINAPI CoSetProxyBlanket(IUnknown *pProxy,DWORD dwAuthnSvc,DWORD dwAuthzSvc,OLECHAR *pServerPrincName,DWORD dwAuthnLevel,DWORD dwImpLevel,RPC_AUTH_IDENTITY_HANDLE pAuthInfo,DWORD dwCapabilities);
HRESULT WINAPI CoCreateInstance(const CLSID *const rclsid,LPUNKNOWN pUnkOuter,DWORD dwClsContext,const IID *const riid,LPVOID *ppv);
